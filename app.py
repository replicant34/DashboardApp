{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "af87982c-dcde-4656-bcff-d81526abf860",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/xv/rzvgqjxn6p91h8mbll11tgzw0000gn/T/ipykernel_92856/898157187.py:72: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "/opt/anaconda3/envs/second/lib/python3.9/site-packages/dash/dash.py:2282: DeprecationWarning:\n",
      "\n",
      "Dash.run_server is deprecated and will be removed in Dash 3.0\n",
      "\n",
      "Address already in use\n",
      "Port 8050 is in use by another program. Either identify and stop that program, or start the server with a different port.\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'tuple' object has no attribute 'tb_frame'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/werkzeug/serving.py:750\u001b[0m, in \u001b[0;36mBaseWSGIServer.__init__\u001b[0;34m(self, host, port, app, handler, passthrough_errors, ssl_context, fd)\u001b[0m\n\u001b[1;32m    749\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 750\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mserver_bind\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    751\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mserver_activate()\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/http/server.py:137\u001b[0m, in \u001b[0;36mHTTPServer.server_bind\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    136\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Override server_bind to store the server name.\"\"\"\u001b[39;00m\n\u001b[0;32m--> 137\u001b[0m \u001b[43msocketserver\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mTCPServer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mserver_bind\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    138\u001b[0m host, port \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mserver_address[:\u001b[38;5;241m2\u001b[39m]\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/socketserver.py:466\u001b[0m, in \u001b[0;36mTCPServer.server_bind\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    465\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msocket\u001b[38;5;241m.\u001b[39msetsockopt(socket\u001b[38;5;241m.\u001b[39mSOL_SOCKET, socket\u001b[38;5;241m.\u001b[39mSO_REUSEADDR, \u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m--> 466\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msocket\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbind\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mserver_address\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    467\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mserver_address \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msocket\u001b[38;5;241m.\u001b[39mgetsockname()\n",
      "\u001b[0;31mOSError\u001b[0m: [Errno 48] Address already in use",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mSystemExit\u001b[0m                                Traceback (most recent call last)",
      "    \u001b[0;31m[... skipping hidden 1 frame]\u001b[0m\n",
      "Cell \u001b[0;32mIn[6], line 1029\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m-> 1029\u001b[0m     \u001b[43mapp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun_server\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mexternal\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdebug\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/dash/dash.py:2287\u001b[0m, in \u001b[0;36mDash.run_server\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2282\u001b[0m warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m   2283\u001b[0m     \u001b[38;5;167;01mDeprecationWarning\u001b[39;00m(\n\u001b[1;32m   2284\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDash.run_server is deprecated and will be removed in Dash 3.0\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   2285\u001b[0m     )\n\u001b[1;32m   2286\u001b[0m )\n\u001b[0;32m-> 2287\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/dash/dash.py:2173\u001b[0m, in \u001b[0;36mDash.run\u001b[0;34m(self, host, port, proxy, debug, jupyter_mode, jupyter_width, jupyter_height, jupyter_server_url, dev_tools_ui, dev_tools_props_check, dev_tools_serve_dev_bundles, dev_tools_hot_reload, dev_tools_hot_reload_interval, dev_tools_hot_reload_watch_interval, dev_tools_hot_reload_max_retry, dev_tools_silence_routes_logging, dev_tools_prune_errors, **flask_run_options)\u001b[0m\n\u001b[1;32m   2172\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m jupyter_dash\u001b[38;5;241m.\u001b[39mactive:\n\u001b[0;32m-> 2173\u001b[0m     \u001b[43mjupyter_dash\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun_app\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2174\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2175\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mjupyter_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2176\u001b[0m \u001b[43m        \u001b[49m\u001b[43mwidth\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mjupyter_width\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2177\u001b[0m \u001b[43m        \u001b[49m\u001b[43mheight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mjupyter_height\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2178\u001b[0m \u001b[43m        \u001b[49m\u001b[43mhost\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mhost\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2179\u001b[0m \u001b[43m        \u001b[49m\u001b[43mport\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mport\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2180\u001b[0m \u001b[43m        \u001b[49m\u001b[43mserver_url\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mjupyter_server_url\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2181\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2182\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/dash/_jupyter.py:333\u001b[0m, in \u001b[0;36mJupyterDash.run_app\u001b[0;34m(self, app, mode, width, height, host, port, server_url)\u001b[0m\n\u001b[1;32m    331\u001b[0m err_q \u001b[38;5;241m=\u001b[39m queue\u001b[38;5;241m.\u001b[39mQueue()\n\u001b[0;32m--> 333\u001b[0m server \u001b[38;5;241m=\u001b[39m \u001b[43mmake_server\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhost\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mport\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mapp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mserver\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mthreaded\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mprocesses\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    334\u001b[0m logging\u001b[38;5;241m.\u001b[39mgetLogger(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwerkzeug\u001b[39m\u001b[38;5;124m\"\u001b[39m)\u001b[38;5;241m.\u001b[39msetLevel(logging\u001b[38;5;241m.\u001b[39mERROR)\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/werkzeug/serving.py:921\u001b[0m, in \u001b[0;36mmake_server\u001b[0;34m(host, port, app, threaded, processes, request_handler, passthrough_errors, ssl_context, fd)\u001b[0m\n\u001b[1;32m    920\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m threaded:\n\u001b[0;32m--> 921\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mThreadedWSGIServer\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    922\u001b[0m \u001b[43m        \u001b[49m\u001b[43mhost\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mport\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mapp\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrequest_handler\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpassthrough_errors\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mssl_context\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfd\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfd\u001b[49m\n\u001b[1;32m    923\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    925\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m processes \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/werkzeug/serving.py:773\u001b[0m, in \u001b[0;36mBaseWSGIServer.__init__\u001b[0;34m(self, host, port, app, handler, passthrough_errors, ssl_context, fd)\u001b[0m\n\u001b[1;32m    767\u001b[0m             \u001b[38;5;28mprint\u001b[39m(\n\u001b[1;32m    768\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mOn macOS, try disabling the \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAirPlay Receiver\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m service\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    769\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m from System Preferences -> General -> AirDrop & Handoff.\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m    770\u001b[0m                 file\u001b[38;5;241m=\u001b[39msys\u001b[38;5;241m.\u001b[39mstderr,\n\u001b[1;32m    771\u001b[0m             )\n\u001b[0;32m--> 773\u001b[0m     \u001b[43msys\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexit\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    774\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mBaseException\u001b[39;00m:\n",
      "\u001b[0;31mSystemExit\u001b[0m: 1",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "    \u001b[0;31m[... skipping hidden 1 frame]\u001b[0m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/IPython/core/interactiveshell.py:2097\u001b[0m, in \u001b[0;36mInteractiveShell.showtraceback\u001b[0;34m(self, exc_tuple, filename, tb_offset, exception_only, running_compiled_code)\u001b[0m\n\u001b[1;32m   2094\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m exception_only:\n\u001b[1;32m   2095\u001b[0m     stb \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAn exception has occurred, use \u001b[39m\u001b[38;5;124m%\u001b[39m\u001b[38;5;124mtb to see \u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m   2096\u001b[0m            \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mthe full traceback.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m-> 2097\u001b[0m     stb\u001b[38;5;241m.\u001b[39mextend(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mInteractiveTB\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_exception_only\u001b[49m\u001b[43m(\u001b[49m\u001b[43metype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2098\u001b[0m \u001b[43m                                                     \u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m   2099\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   2101\u001b[0m     \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcontains_exceptiongroup\u001b[39m(val):\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/IPython/core/ultratb.py:710\u001b[0m, in \u001b[0;36mListTB.get_exception_only\u001b[0;34m(self, etype, value)\u001b[0m\n\u001b[1;32m    702\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget_exception_only\u001b[39m(\u001b[38;5;28mself\u001b[39m, etype, value):\n\u001b[1;32m    703\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Only print the exception type and message, without a traceback.\u001b[39;00m\n\u001b[1;32m    704\u001b[0m \n\u001b[1;32m    705\u001b[0m \u001b[38;5;124;03m    Parameters\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    708\u001b[0m \u001b[38;5;124;03m    value : exception value\u001b[39;00m\n\u001b[1;32m    709\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 710\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mListTB\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstructured_traceback\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43metype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/IPython/core/ultratb.py:568\u001b[0m, in \u001b[0;36mListTB.structured_traceback\u001b[0;34m(self, etype, evalue, etb, tb_offset, context)\u001b[0m\n\u001b[1;32m    565\u001b[0m     chained_exc_ids\u001b[38;5;241m.\u001b[39madd(\u001b[38;5;28mid\u001b[39m(exception[\u001b[38;5;241m1\u001b[39m]))\n\u001b[1;32m    566\u001b[0m     chained_exceptions_tb_offset \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m    567\u001b[0m     out_list \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m--> 568\u001b[0m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstructured_traceback\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    569\u001b[0m \u001b[43m            \u001b[49m\u001b[43metype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    570\u001b[0m \u001b[43m            \u001b[49m\u001b[43mevalue\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    571\u001b[0m \u001b[43m            \u001b[49m\u001b[43m(\u001b[49m\u001b[43metb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mchained_exc_ids\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# type: ignore\u001b[39;49;00m\n\u001b[1;32m    572\u001b[0m \u001b[43m            \u001b[49m\u001b[43mchained_exceptions_tb_offset\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    573\u001b[0m \u001b[43m            \u001b[49m\u001b[43mcontext\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    574\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    575\u001b[0m         \u001b[38;5;241m+\u001b[39m chained_exception_message\n\u001b[1;32m    576\u001b[0m         \u001b[38;5;241m+\u001b[39m out_list)\n\u001b[1;32m    578\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m out_list\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/IPython/core/ultratb.py:1435\u001b[0m, in \u001b[0;36mAutoFormattedTB.structured_traceback\u001b[0;34m(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1433\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1434\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtb \u001b[38;5;241m=\u001b[39m etb\n\u001b[0;32m-> 1435\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mFormattedTB\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstructured_traceback\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1436\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43metype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mevalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43metb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtb_offset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnumber_of_lines_of_context\u001b[49m\n\u001b[1;32m   1437\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/IPython/core/ultratb.py:1326\u001b[0m, in \u001b[0;36mFormattedTB.structured_traceback\u001b[0;34m(self, etype, value, tb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1323\u001b[0m mode \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmode\n\u001b[1;32m   1324\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mode \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose_modes:\n\u001b[1;32m   1325\u001b[0m     \u001b[38;5;66;03m# Verbose modes need a full traceback\u001b[39;00m\n\u001b[0;32m-> 1326\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mVerboseTB\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstructured_traceback\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1327\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43metype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtb_offset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnumber_of_lines_of_context\u001b[49m\n\u001b[1;32m   1328\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1329\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMinimal\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m   1330\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m ListTB\u001b[38;5;241m.\u001b[39mget_exception_only(\u001b[38;5;28mself\u001b[39m, etype, value)\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/IPython/core/ultratb.py:1173\u001b[0m, in \u001b[0;36mVerboseTB.structured_traceback\u001b[0;34m(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1164\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mstructured_traceback\u001b[39m(\n\u001b[1;32m   1165\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   1166\u001b[0m     etype: \u001b[38;5;28mtype\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1170\u001b[0m     number_of_lines_of_context: \u001b[38;5;28mint\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m,\n\u001b[1;32m   1171\u001b[0m ):\n\u001b[1;32m   1172\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Return a nice text document describing the traceback.\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1173\u001b[0m     formatted_exception \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mformat_exception_as_a_whole\u001b[49m\u001b[43m(\u001b[49m\u001b[43metype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mevalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43metb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnumber_of_lines_of_context\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1174\u001b[0m \u001b[43m                                                           \u001b[49m\u001b[43mtb_offset\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1176\u001b[0m     colors \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mColors  \u001b[38;5;66;03m# just a shorthand + quicker name lookup\u001b[39;00m\n\u001b[1;32m   1177\u001b[0m     colorsnormal \u001b[38;5;241m=\u001b[39m colors\u001b[38;5;241m.\u001b[39mNormal  \u001b[38;5;66;03m# used a lot\u001b[39;00m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/IPython/core/ultratb.py:1063\u001b[0m, in \u001b[0;36mVerboseTB.format_exception_as_a_whole\u001b[0;34m(self, etype, evalue, etb, number_of_lines_of_context, tb_offset)\u001b[0m\n\u001b[1;32m   1060\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(tb_offset, \u001b[38;5;28mint\u001b[39m)\n\u001b[1;32m   1061\u001b[0m head \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprepare_header(\u001b[38;5;28mstr\u001b[39m(etype), \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlong_header)\n\u001b[1;32m   1062\u001b[0m records \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m-> 1063\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_records\u001b[49m\u001b[43m(\u001b[49m\u001b[43metb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnumber_of_lines_of_context\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtb_offset\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mif\u001b[39;00m etb \u001b[38;5;28;01melse\u001b[39;00m []\n\u001b[1;32m   1064\u001b[0m )\n\u001b[1;32m   1066\u001b[0m frames \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m   1067\u001b[0m skipped \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/second/lib/python3.9/site-packages/IPython/core/ultratb.py:1131\u001b[0m, in \u001b[0;36mVerboseTB.get_records\u001b[0;34m(self, etb, number_of_lines_of_context, tb_offset)\u001b[0m\n\u001b[1;32m   1129\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m cf \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1130\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 1131\u001b[0m         mod \u001b[38;5;241m=\u001b[39m inspect\u001b[38;5;241m.\u001b[39mgetmodule(\u001b[43mcf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtb_frame\u001b[49m)\n\u001b[1;32m   1132\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m mod \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1133\u001b[0m             mod_name \u001b[38;5;241m=\u001b[39m mod\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'tb_frame'"
     ]
    }
   ],
   "source": [
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Libraries\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "from jupyter_dash import JupyterDash\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from dash import Dash, dcc, html, Input, Output, dash_table\n",
    "from sklearn.neighbors import NearestNeighbors\n",
    "from sklearn.model_selection import train_test_split\n",
    "from mlxtend.frequent_patterns import apriori, association_rules\n",
    "from statsmodels.tsa.statespace.sarimax import SARIMAX\n",
    "from pmdarima import auto_arima\n",
    "import networkx as nx\n",
    "from dash.dependencies import Input, Output, State\n",
    "from dash.dependencies import State \n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Data Prep\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "# read the file\n",
    "df = pd.read_csv(\"file.csv\")\n",
    "df2 = df.copy()\n",
    "df3 = df.copy()\n",
    "# feature selection\n",
    "df = df[['CustomerID',\n",
    "         'Gender',\n",
    "         'Location',\n",
    "         'Transaction_ID',\n",
    "         'Transaction_Date',\n",
    "         'Product_Description',\n",
    "         'Product_Category',\n",
    "         'Quantity',\n",
    "         'Avg_Price',\n",
    "         'Online_Spend',\n",
    "         'Offline_Spend']]\n",
    "\n",
    "# convert states names into codes\n",
    "location_mapping = {\n",
    "    'Chicago': 'IL',\n",
    "    'California': 'CA',\n",
    "    'New York': 'NY', \n",
    "    'New Jersey': 'NJ', \n",
    "    'Washington DC': 'DC',   \n",
    "}\n",
    "\n",
    "df['Location_Code'] = df['Location'].map(location_mapping)\n",
    "\n",
    "# Get total spent \n",
    "df['Total_Spend'] = df['Offline_Spend'] + df['Online_Spend']\n",
    "\n",
    "# Adjust dates\n",
    "df['Transaction_Date'] = pd.to_datetime(df['Transaction_Date'])\n",
    "df['Month'] = pd.to_datetime(df['Transaction_Date']).dt.to_period('M')\n",
    "\n",
    "# Drop missing values\n",
    "df = df.dropna()\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Data Prep for recomendation user-user\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "recommendation_df = df2[[\"CustomerID\", \"Product_Description\"]]\n",
    "recommendation_df['Rank'] = recommendation_df.groupby(['CustomerID', 'Product_Description'])['Product_Description'].transform('count')\n",
    "recommendation_df = recommendation_df.drop_duplicates()\n",
    "recommendation_df = recommendation_df.dropna()\n",
    "recommendation_df = recommendation_df[recommendation_df.groupby('CustomerID')['CustomerID'].transform('count') > 1]\n",
    "\n",
    "# User-item matrix\n",
    "user_item_matrix = recommendation_df.pivot_table(index='CustomerID', columns='Product_Description', values='Rank', fill_value=0)\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test = train_test_split(user_item_matrix, test_size=0.25, random_state=42)\n",
    "\n",
    "# Train the collaborative filtering model using KNN\n",
    "model_knn = NearestNeighbors(metric='cosine', algorithm='brute')\n",
    "model_knn.fit(X_train)\n",
    "\n",
    "# Define function for recommendation user-user\n",
    "def user_user(user_id, num_recommendations=1):\n",
    "    if user_id not in user_item_matrix.index:\n",
    "        return [f\"User ID {user_id} not found in the dataset.\"]\n",
    "    \n",
    "    # get row index for the user\n",
    "    user_row = user_item_matrix.loc[user_id].values.reshape(1, -1)\n",
    "    \n",
    "    # Find similar users\n",
    "    distances, indices = model_knn.kneighbors(user_row, n_neighbors=num_recommendations + 1)\n",
    "    similar_user_indices = indices.flatten()[1:]\n",
    "    \n",
    "    # Get items from similar users\n",
    "    similar_users = user_item_matrix.iloc[similar_user_indices]\n",
    "    recommendations = similar_users.sum(axis=0)\n",
    "    \n",
    "    # Exclude products the user already owns\n",
    "    user_products = set(user_item_matrix.loc[user_id][user_item_matrix.loc[user_id] > 0].index)\n",
    "    recommendations = recommendations.drop(user_products)\n",
    "    \n",
    "    # Get top recommendations\n",
    "    recommended_products = recommendations.nlargest(num_recommendations).index.tolist()\n",
    "    return recommended_products\n",
    "\n",
    "# Define function for displaying similar users and their purchase to justify recommendation \n",
    "\n",
    "def plot_user_user(user_id, similar_users, recommendations):\n",
    "\n",
    "    G = nx.DiGraph()\n",
    "\n",
    "    # target customer in center\n",
    "    G.add_node(user_id, label=\"Target Customer\", node_color=\"lightblue\")\n",
    "\n",
    "    # similar users\n",
    "    for similar_user in similar_users:\n",
    "        G.add_node(similar_user, label=f\"Customer {similar_user}\", node_color=\"lightgreen\")\n",
    "        G.add_edge(user_id, similar_user)\n",
    "\n",
    "    # recommended products\n",
    "    for product in recommendations:\n",
    "        G.add_node(product, label=f\"Product: {product}\", node_color=\"orange\")\n",
    "        for similar_user in similar_users:\n",
    "            G.add_edge(similar_user, product)\n",
    "\n",
    "    # positions for nodes\n",
    "    pos = nx.spring_layout(G, seed=42)\n",
    "\n",
    "    # create edges\n",
    "    edge_x = []\n",
    "    edge_y = []\n",
    "    for edge in G.edges():\n",
    "        x0, y0 = pos[edge[0]]\n",
    "        x1, y1 = pos[edge[1]]\n",
    "        edge_x.append(x0)\n",
    "        edge_x.append(x1)\n",
    "        edge_x.append(None)\n",
    "        edge_y.append(y0)\n",
    "        edge_y.append(y1)\n",
    "        edge_y.append(None)\n",
    "\n",
    "    edge_trace = go.Scatter(\n",
    "        x=edge_x,\n",
    "        y=edge_y,\n",
    "        line=dict(width=1, color='#888'),\n",
    "        hoverinfo='none',\n",
    "        mode='lines'\n",
    "    )\n",
    "\n",
    "    # create nodes\n",
    "    node_x = []\n",
    "    node_y = []\n",
    "    node_labels = []\n",
    "    node_colors = []\n",
    "    for node in G.nodes(data=True):\n",
    "        x, y = pos[node[0]]\n",
    "        node_x.append(x)\n",
    "        node_y.append(y)\n",
    "        node_labels.append(node[1].get('label', str(node[0])))\n",
    "        node_colors.append(node[1].get('node_color', \"lightblue\"))\n",
    "\n",
    "    node_trace = go.Scatter(\n",
    "        x=node_x,\n",
    "        y=node_y,\n",
    "        mode='markers+text',\n",
    "        text=node_labels,\n",
    "        textposition=\"top center\",\n",
    "        marker=dict(\n",
    "            size=20,\n",
    "            color=node_colors,\n",
    "            line=dict(width=2, color='black')\n",
    "        ),\n",
    "        hoverinfo='text'\n",
    "    )\n",
    "\n",
    "    # create figure\n",
    "    fig = go.Figure(data=[edge_trace, node_trace],\n",
    "                    layout=go.Layout(\n",
    "                        title='Customer-Based Recommendation Graph',\n",
    "                        titlefont_size=16,\n",
    "                        showlegend=False,\n",
    "                        hovermode='closest',\n",
    "                        margin=dict(b=0, l=0, r=0, t=40),\n",
    "                        xaxis=dict(showgrid=False, zeroline=False),\n",
    "                        yaxis=dict(showgrid=False, zeroline=False))\n",
    "                    )\n",
    "\n",
    "    return fig\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Data Prep for recomendation item-item\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "product_recommendation_df = df3[[\"CustomerID\", \"Product_Description\"]]\n",
    "product_recommendation_df = product_recommendation_df.dropna()\n",
    "\n",
    "# user-item matrix\n",
    "customer_product_matrix = product_recommendation_df.pivot_table(\n",
    "    index='CustomerID',\n",
    "    columns='Product_Description',\n",
    "    aggfunc=lambda x: True,\n",
    "    fill_value=False\n",
    ")\n",
    "\n",
    "# Reset the index and drop customer id feature\n",
    "customer_product_matrix = customer_product_matrix.reset_index(drop=True)\n",
    "\n",
    "# frequent item sets and association rules\n",
    "frequent_itemsets_ap = apriori(customer_product_matrix, min_support=0.3, use_colnames=True)\n",
    "rules_ap = association_rules(frequent_itemsets_ap, metric=\"confidence\", min_threshold=0.8)\n",
    "\n",
    "# function based on products (MBA)\n",
    "def recommend_products(rules, product_basket):\n",
    "    recommendations = set()\n",
    "    for _, rule in rules.iterrows():\n",
    "        antecedents = set(rule['antecedents'])\n",
    "        consequents = set(rule['consequents'])\n",
    "        \n",
    "        if antecedents.issubset(product_basket):\n",
    "            recommendations.update(consequents - set(product_basket))\n",
    "    \n",
    "    return list(recommendations)\n",
    "\n",
    "# Function to display network of the most related items\n",
    "def plot_rule_graph(rules, product_basket):\n",
    "\n",
    "    G = nx.DiGraph()\n",
    "\n",
    "    # nodes and edges based on rules\n",
    "    for _, rule in rules.iterrows():\n",
    "        antecedents = ', '.join(list(rule['antecedents']))\n",
    "        consequents = ', '.join(list(rule['consequents']))\n",
    "        \n",
    "        if set(rule['antecedents']).issubset(product_basket):\n",
    "            G.add_edge(antecedents, consequents, weight=rule['lift'])\n",
    "\n",
    "    # positions for the nodes\n",
    "    pos = nx.spring_layout(G, seed=42)\n",
    "\n",
    "    # create  edges\n",
    "    edge_x = []\n",
    "    edge_y = []\n",
    "    for edge in G.edges(data=True):\n",
    "        x0, y0 = pos[edge[0]]\n",
    "        x1, y1 = pos[edge[1]]\n",
    "        edge_x.append(x0)\n",
    "        edge_x.append(x1)\n",
    "        edge_x.append(None)\n",
    "        edge_y.append(y0)\n",
    "        edge_y.append(y1)\n",
    "        edge_y.append(None)\n",
    "\n",
    "    edge_trace = go.Scatter(\n",
    "        x=edge_x,\n",
    "        y=edge_y,\n",
    "        line=dict(width=1, color='#888'),\n",
    "        hoverinfo='none',\n",
    "        mode='lines'\n",
    "    )\n",
    "\n",
    "    # create nodes\n",
    "    node_x = []\n",
    "    node_y = []\n",
    "    text = []\n",
    "    for node in G.nodes():\n",
    "        x, y = pos[node]\n",
    "        node_x.append(x)\n",
    "        node_y.append(y)\n",
    "        text.append(node)\n",
    "\n",
    "    node_trace = go.Scatter(\n",
    "        x=node_x,\n",
    "        y=node_y,\n",
    "        mode='markers+text',\n",
    "        hoverinfo='text',\n",
    "        text=text,\n",
    "        textposition=\"top center\",\n",
    "        marker=dict(\n",
    "            showscale=True,\n",
    "            colorscale='YlGnBu',\n",
    "            reversescale=True,\n",
    "            color=[],\n",
    "            size=15,\n",
    "            colorbar=dict(\n",
    "                thickness=15,\n",
    "                title='Node Connections',\n",
    "                xanchor='left',\n",
    "                titleside='right'\n",
    "            ),\n",
    "            line_width=2\n",
    "        )\n",
    "    )\n",
    "\n",
    "    # colours based on number of connections\n",
    "    node_adjacencies = []\n",
    "    for node, adjacencies in enumerate(G.adjacency()):\n",
    "        node_adjacencies.append(len(adjacencies[1]))\n",
    "    node_trace.marker.color = node_adjacencies\n",
    "\n",
    "    # figure\n",
    "    fig = go.Figure(data=[edge_trace, node_trace],\n",
    "                    layout=go.Layout(\n",
    "                        title='Recommendation Rule Path',\n",
    "                        titlefont_size=16,\n",
    "                        showlegend=False,\n",
    "                        hovermode='closest',\n",
    "                        margin=dict(b=0, l=0, r=0, t=40),\n",
    "                        xaxis=dict(showgrid=False, zeroline=False),\n",
    "                        yaxis=dict(showgrid=False, zeroline=False))\n",
    "                    )\n",
    "\n",
    "    return fig\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Initialise the dashboard\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "app = Dash(__name__, suppress_callback_exceptions=True)\n",
    "\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Dark/Bright mode properties\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "light_theme = {\n",
    "    \"background\": \"#FFFFFF\",\n",
    "    \"text\": \"black\",\n",
    "    \"sidebar_bg\": \"#F8F9FA\",\n",
    "    \"button_bg\": \"#5d646b\",\n",
    "    \"button_color\": \"#FFFFFF\",\n",
    "}\n",
    "\n",
    "dark_theme = {\n",
    "    \"background\": \"#1E1E1E\", # background right side\n",
    "    \"text\": \"white\",\n",
    "    \"sidebar_bg\": \"#2D2D2D\", # background left side\n",
    "    \"button_bg\": \"blue\",     # switch button\n",
    "    \"button_color\": \"green\",\n",
    "}\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Dashboard layout\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "app.layout = html.Div(\n",
    "    # Main page\n",
    "    id=\"main-container\",\n",
    "    style={\"width\": \"100vw\", \"height\": \"100vh\"},\n",
    "    children=[\n",
    "        html.Div(\n",
    "            style={\n",
    "                \"display\": \"flex\",\n",
    "                \"flexDirection\": \"row\",\n",
    "                \"width\": \"100%\",\n",
    "                \"height\": \"100%\",\n",
    "            },\n",
    "            children=[\n",
    "                # Sidebar\n",
    "                html.Div(\n",
    "                    id=\"sidebar\",\n",
    "                    style={\n",
    "                        \"flex\": \"0 0 30%\",\n",
    "                        \"height\": \"100%\",\n",
    "                        \"borderRight\": \"1px solid lightgray\",\n",
    "                        \"padding\": \"10px\",\n",
    "                        \"overflowY\": \"auto\",\n",
    "                        \"backgroundColor\": light_theme[\"sidebar_bg\"], # set flexible colour for datk mode\n",
    "                        \"color\": light_theme[\"text\"],\n",
    "                    },\n",
    "                    children=[\n",
    "                        # Main tabs on the top of the left side\n",
    "                        dcc.Tabs(\n",
    "                            id=\"main-tabs\",\n",
    "                            value=\"customers-info\",\n",
    "                            children=[\n",
    "                                dcc.Tab(label=\"Customer Info\", value=\"customers-info\"),\n",
    "                                dcc.Tab(label=\"Recommendations\", value=\"recommendations\"),\n",
    "                                dcc.Tab(label=\"Sales\", value=\"sales\"),\n",
    "                            ],\n",
    "                        ),\n",
    "                        html.Div(id=\"main-tab-content\", style={\"padding\": \"20px\"}),\n",
    "                        # Dark Mode Toggle Button\n",
    "                        html.Div(\n",
    "                            style={\"marginTop\": \"20px\", \"textAlign\": \"center\"},\n",
    "                            children=[\n",
    "                                html.Button(\n",
    "                                    \"Dark/Light  Mode\",\n",
    "                                    id=\"toggle-dark-mode\",\n",
    "                                    n_clicks=0,\n",
    "                                    style={\n",
    "                                        \"marginTop\": \"10px\",\n",
    "                                        \"padding\": \"10px\",\n",
    "                                        \"backgroundColor\": light_theme[\"button_bg\"],\n",
    "                                        \"color\": light_theme[\"button_color\"],\n",
    "                                        \"border\": \"none\",\n",
    "                                        \"borderRadius\": \"5px\",\n",
    "                                        \"cursor\": \"pointer\",\n",
    "                                    },\n",
    "                                ),\n",
    "                            ],\n",
    "                        ),\n",
    "                    ],\n",
    "                ),\n",
    "                # Main Content Area\n",
    "                html.Div(\n",
    "                    id=\"output-content\",\n",
    "                    style={\n",
    "                        \"flex\": \"1\",\n",
    "                        \"height\": \"100%\",\n",
    "                        \"padding\": \"20px\",\n",
    "                        \"overflowY\": \"auto\",\n",
    "                        \"backgroundColor\": light_theme[\"background\"],\n",
    "                        \"color\": light_theme[\"text\"],\n",
    "                    },\n",
    "                    children=[\n",
    "                        dcc.Graph(id=\"plot\"),\n",
    "                    ],\n",
    "                ),\n",
    "            ],\n",
    "        ),\n",
    "    ],\n",
    ")\n",
    "\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "# Callbacks\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Callback dark mode switch \n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    [\n",
    "        Output(\"main-container\", \"style\"),\n",
    "        Output(\"sidebar\", \"style\"),\n",
    "        Output(\"output-content\", \"style\"),\n",
    "        Output(\"toggle-dark-mode\", \"style\"),\n",
    "    ],\n",
    "    [Input(\"toggle-dark-mode\", \"n_clicks\")],\n",
    ")\n",
    "def toggle_dark_mode(n_clicks):\n",
    "    # Determine the theme based on toggle state\n",
    "    theme = dark_theme if n_clicks % 2 == 1 else light_theme\n",
    "\n",
    "    # Update styles for each section\n",
    "    main_style = {\"width\": \"100vw\", \"height\": \"100vh\"}\n",
    "    sidebar_style = {\n",
    "        \"flex\": \"0 0 30%\",\n",
    "        \"height\": \"100%\",\n",
    "        \"borderRight\": \"1px solid lightgray\",\n",
    "        \"padding\": \"10px\",\n",
    "        \"overflowY\": \"auto\",\n",
    "        \"backgroundColor\": theme[\"sidebar_bg\"],\n",
    "    }\n",
    "    content_style = {\n",
    "        \"flex\": \"1\",\n",
    "        \"height\": \"100%\",\n",
    "        \"padding\": \"20px\",\n",
    "        \"overflowY\": \"auto\",\n",
    "        \"backgroundColor\": theme[\"background\"],\n",
    "        \"color\": theme[\"text\"],\n",
    "    }\n",
    "    button_style = {\n",
    "        \"margin\": \"10px\",\n",
    "        \"padding\": \"10px\",\n",
    "        \"backgroundColor\": theme[\"button_bg\"],\n",
    "        \"color\": theme[\"button_color\"],\n",
    "        \"border\": \"none\",\n",
    "        \"borderRadius\": \"5px\",\n",
    "        \"cursor\": \"pointer\",\n",
    "    }\n",
    "\n",
    "    return main_style, sidebar_style, content_style, button_style\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Add 3 tabs with sub tubs (Customer info, Recomendations and Sales)\n",
    "# Define Properties (Input: tabs IDs line 72, Output: function update_tab_content)\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"main-tab-content\", \"children\"), Output(\"output-content\", \"children\")],\n",
    "    Input(\"main-tabs\", \"value\"),\n",
    ")\n",
    "def update_tab_content(tab_name):\n",
    "    if tab_name == \"customers-info\":\n",
    "        # Left-Side Inputs\n",
    "        inputs = html.Div([\n",
    "            dcc.Tabs(\n",
    "                id=\"customer-info-tabs\",\n",
    "                value=\"specific-customer\",\n",
    "                children=[\n",
    "                    dcc.Tab(label=\"Specific Customer\", value=\"specific-customer\"),\n",
    "                    dcc.Tab(label=\"Demographic Group\", value=\"demographic-group\"),\n",
    "                ],\n",
    "            ),\n",
    "            html.Div(id=\"customer-info-inputs\", style={\"padding\": \"20px\"}),\n",
    "        ])\n",
    "\n",
    "        # Right side Outputs\n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"customer-info-outputs\"),\n",
    "        ])\n",
    "\n",
    "        return inputs, outputs\n",
    "\n",
    "    elif tab_name == \"recommendations\":\n",
    "        # Left side Inputs with Sub-Tabs\n",
    "        inputs = html.Div([\n",
    "            dcc.Tabs(\n",
    "                id=\"recommendation-tabs\",\n",
    "                value=\"based-on-customer\",\n",
    "                children=[\n",
    "                    dcc.Tab(label=\"Based on Customer\", value=\"based-on-customer\"),\n",
    "                    dcc.Tab(label=\"Based on Product\", value=\"based-on-product\"),\n",
    "                ],\n",
    "            ),\n",
    "            html.Div(id=\"recommendation-inputs\", style={\"padding\": \"20px\"}),\n",
    "        ])\n",
    "\n",
    "        # Right-Side Outputs\n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"recommendation-outputs\"),\n",
    "        ])\n",
    "\n",
    "        return inputs, outputs\n",
    "\n",
    "    elif tab_name == \"sales\":\n",
    "    # Left side Inputs for Sales\n",
    "        inputs = html.Div([\n",
    "            html.H3(\"Sales Filters\"),\n",
    "            html.Label(\"Date Range:\"),\n",
    "            dcc.DatePickerRange(\n",
    "                id=\"sales-date-picker\",\n",
    "                start_date=df[\"Transaction_Date\"].min(),\n",
    "                end_date=df[\"Transaction_Date\"].max(),\n",
    "            ),\n",
    "            html.Br(),\n",
    "            html.Label(\"Location:\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"sales-location-dropdown\",\n",
    "                options=[{\"label\": loc, \"value\": loc} for loc in df[\"Location\"].unique()],\n",
    "                placeholder=\"Select a location\",\n",
    "            ),\n",
    "            html.Label(\"Product Category:\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"sales-category-dropdown\",\n",
    "                options=[{\"label\": cat, \"value\": cat} for cat in df[\"Product_Category\"].unique()],\n",
    "                placeholder=\"Select a product category\",\n",
    "            ),\n",
    "            html.Label(\"Forecast Period (Days):\"),\n",
    "            dcc.Slider( \n",
    "                id=\"forecast-slider\",\n",
    "                min=1,\n",
    "                max=30,\n",
    "                step=1,\n",
    "                value=7,\n",
    "                marks={i: f\"{i}d\" for i in range(1, 31, 5)},\n",
    "            ),\n",
    "        ])\n",
    "    \n",
    "        # Right side Outputs\n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"sales-output\"),\n",
    "        ])\n",
    "    \n",
    "        return inputs, outputs\n",
    "\n",
    "    return html.Div(), html.Div()\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Recommendation Sub-Tab Callback\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"recommendation-inputs\", \"children\"), Output(\"recommendation-outputs\", \"children\")],\n",
    "    Input(\"recommendation-tabs\", \"value\"),\n",
    ")\n",
    "def update_recommendation_tab_content(tab_name):\n",
    "    if tab_name == \"based-on-customer\":\n",
    "        inputs = html.Div([\n",
    "            html.H4(\"Recommendations Based on Customer\"),\n",
    "            html.Label(\"Select or Enter Customer ID:\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"recommendation-customer-dropdown\",\n",
    "                options=[{\"label\": str(customer_id), \"value\": customer_id} for customer_id in recommendation_df[\"CustomerID\"].unique()],\n",
    "                placeholder=\"Select a Customer ID\",\n",
    "            ),\n",
    "            html.Br(),\n",
    "            dcc.Input(id=\"recommendation-customer-id\", type=\"text\", placeholder=\"Or Enter Customer ID\"),\n",
    "            html.Button(\"Generate\", id=\"recommendation-customer-button\"),\n",
    "        ])\n",
    "    \n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"recommendation-customer-output\"),\n",
    "            dcc.Graph(id=\"recommendation-customer-graph\"), \n",
    "        ])\n",
    "    \n",
    "        return inputs, outputs\n",
    "\n",
    "    elif tab_name == \"based-on-product\":\n",
    "        # Left Side Inputs\n",
    "        inputs = html.Div([\n",
    "            html.H4(\"Recommendations Based on Product\"),\n",
    "            html.Label(\"Select Products:\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"recommendation-product-dropdown\",\n",
    "                options=[{\"label\": product, \"value\": product} for product in product_recommendation_df[\"Product_Description\"].unique()],\n",
    "                multi=True,\n",
    "                placeholder=\"Select one or more products\",\n",
    "            ),\n",
    "            html.Button(\"Generate\", id=\"recommendation-product-button\"),\n",
    "        ])\n",
    "        \n",
    "        # Right Side Outputs\n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"recommendation-product-output\"),\n",
    "            dcc.Graph(id=\"recommendation-product-graph\"), \n",
    "        ])\n",
    "        \n",
    "        return inputs, outputs\n",
    "\n",
    "    return html.Div(), html.Div()\n",
    "\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# User-User recomendation \n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"recommendation-customer-output\", \"children\"),\n",
    "     Output(\"recommendation-customer-graph\", \"figure\")],\n",
    "    [Input(\"recommendation-customer-button\", \"n_clicks\")],\n",
    "    [State(\"recommendation-customer-id\", \"value\"),\n",
    "     State(\"recommendation-customer-dropdown\", \"value\")],\n",
    ")\n",
    "def generate_customer_recommendations(n_clicks, customer_id_text, customer_id_dropdown):\n",
    "    customer_id = customer_id_dropdown or customer_id_text\n",
    "    if n_clicks and customer_id:\n",
    "        try:\n",
    "            customer_id = int(customer_id)\n",
    "        except ValueError:\n",
    "            return f\"Invalid Customer ID: {customer_id}. Please enter a valid numeric ID.\", go.Figure()\n",
    "\n",
    "        # recommendations and similat users\n",
    "        recommendations = user_user(customer_id, num_recommendations=3)\n",
    "        similar_users = user_item_matrix.loc[customer_id].nlargest(3).index.tolist()\n",
    "\n",
    "        # Generate graph\n",
    "        figure = plot_user_user(customer_id, similar_users, recommendations)\n",
    "\n",
    "        return html.Ul([html.Li(product) for product in recommendations]), figure\n",
    "\n",
    "    return \"Enter a Customer ID and click Generate.\", go.Figure()\n",
    "    \n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Item-Item recomendation \n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"recommendation-product-output\", \"children\"),\n",
    "     Output(\"recommendation-product-graph\", \"figure\")], \n",
    "    [Input(\"recommendation-product-button\", \"n_clicks\")],\n",
    "    [State(\"recommendation-product-dropdown\", \"value\")],\n",
    ")\n",
    "def generate_product_recommendations(n_clicks, product_basket):\n",
    "    if n_clicks and product_basket:\n",
    "        try:\n",
    "            # Convert dropdown values\n",
    "            product_basket = set(product_basket)\n",
    "        except Exception as e:\n",
    "            return f\"Error processing selected products: {e}\", go.Figure()\n",
    "\n",
    "        # Generate recommendations\n",
    "        recommendations = recommend_products(rules_ap, product_basket)\n",
    "        \n",
    "        # Generate graph for rules\n",
    "        figure = plot_rule_graph(rules_ap, product_basket)\n",
    "\n",
    "        if recommendations:\n",
    "            return html.Ul([html.Li(product) for product in recommendations]), figure\n",
    "        else:\n",
    "            return \"No recommendations found for the selected products.\", go.Figure()\n",
    "\n",
    "    return \"Select products and click Generate.\", go.Figure()\n",
    "\n",
    "\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Callbacks for Customer Info Sub-Tabs\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"customer-info-inputs\", \"children\"), Output(\"customer-info-outputs\", \"children\")],\n",
    "    Input(\"customer-info-tabs\", \"value\"),\n",
    ")\n",
    "def update_customer_info_content(tab_name):\n",
    "    if tab_name == \"specific-customer\":\n",
    "        # Left side Inputs\n",
    "        inputs = html.Div([\n",
    "            html.H4(\"Specific Customer Information\"),\n",
    "            html.Label(\"Select or Enter Customer ID:\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"specific-customer-dropdown\",\n",
    "                options=[{\"label\": str(customer_id), \"value\": customer_id} for customer_id in df[\"CustomerID\"].unique()],\n",
    "                placeholder=\"Select a Customer ID\",\n",
    "            ),\n",
    "            html.Br(),\n",
    "            html.Label(\"Or Enter Customer ID:\"),\n",
    "            dcc.Input(id=\"specific-customer-id\", type=\"text\", placeholder=\"Customer ID\"),\n",
    "            html.Br(),\n",
    "            html.Button(\"Search\", id=\"search-button\"),\n",
    "        ])\n",
    "\n",
    "        # Right aide Outputs\n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"specific-customer-info\"),\n",
    "            dcc.Graph(id=\"specific-customer-plot\"),\n",
    "        ])\n",
    "\n",
    "        return inputs, outputs\n",
    "\n",
    "    elif tab_name == \"demographic-group\":\n",
    "    # Left side Inputs\n",
    "        inputs = html.Div([\n",
    "            html.H4(\"Demographic Group Analysis\"),\n",
    "            html.Label(\"Select Gender:\"),\n",
    "            dcc.Checklist(\n",
    "                id=\"demographic-gender-checklist\",\n",
    "                options=[\n",
    "                    {\"label\": \"Male\", \"value\": \"M\"},\n",
    "                    {\"label\": \"Female\", \"value\": \"F\"}],\n",
    "            ),\n",
    "            html.Br(),\n",
    "            html.Label(\"Select Location(s):\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"demographic-location-dropdown\",\n",
    "                options=[{\"label\": loc, \"value\": loc} for loc in df[\"Location\"].unique()],\n",
    "                multi=True,\n",
    "            ),\n",
    "        ])\n",
    "    \n",
    "        # Right side Outputs (Bar plot + table)\n",
    "        outputs = html.Div([\n",
    "            dcc.Graph(id=\"demographic-category-plot\"),  # Bar plor\n",
    "            html.Div(id=\"demographic-analysis-output\"),  # Table\n",
    "        ])\n",
    "    \n",
    "        return inputs, outputs\n",
    "\n",
    "    return html.Div(), html.Div()\n",
    "\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Callback for Specific Customer Information\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"specific-customer-info\", \"children\"),\n",
    "     Output(\"specific-customer-plot\", \"figure\")],\n",
    "    [Input(\"search-button\", \"n_clicks\")],\n",
    "    [State(\"specific-customer-id\", \"value\"),\n",
    "     State(\"specific-customer-dropdown\", \"value\")], \n",
    ")\n",
    "def fetch_specific_customer_info(n_clicks, customer_id_text, customer_id_dropdown):\n",
    "    \n",
    "    customer_id = customer_id_dropdown or customer_id_text  \n",
    "\n",
    "    if n_clicks and customer_id:\n",
    "        # Filter the data for the specified customer ID\n",
    "        filtered_df = df[df[\"CustomerID\"].astype(str).str.contains(str(customer_id))]\n",
    "        \n",
    "        if not filtered_df.empty:\n",
    "            # Create a table for the customer transactions\n",
    "            table = dash_table.DataTable(\n",
    "                data=filtered_df[[\"CustomerID\", \"Transaction_ID\", \"Transaction_Date\", \"Product_Description\", \n",
    "                                  \"Product_Category\", \"Quantity\", \"Total_Spend\"]].drop_duplicates().to_dict(\"records\"),\n",
    "                columns=[\n",
    "                    {\"name\": \"Customer ID\", \"id\": \"CustomerID\"},\n",
    "                    {\"name\": \"Transaction ID\", \"id\": \"Transaction_ID\"},\n",
    "                    {\"name\": \"Transaction Date\", \"id\": \"Transaction_Date\"},\n",
    "                    {\"name\": \"Product Description\", \"id\": \"Product_Description\"},\n",
    "                    {\"name\": \"Product Category\", \"id\": \"Product_Category\"},\n",
    "                    {\"name\": \"Quantity\", \"id\": \"Quantity\"},\n",
    "                    {\"name\": \"Total Spend ($)\", \"id\": \"Total_Spend\"},\n",
    "                ],\n",
    "                style_table={\"overflowX\": \"auto\"},\n",
    "                page_size=7, \n",
    "            )\n",
    "\n",
    "            # data for  bar plot\n",
    "            category_data = filtered_df.groupby(\"Product_Category\")[\"Total_Spend\"].sum().reset_index()\n",
    "\n",
    "            #  bar plot\n",
    "            bar_fig = px.bar(\n",
    "                category_data,\n",
    "                x=\"Product_Category\",\n",
    "                y=\"Total_Spend\",\n",
    "                title=f\"Total Spend by Category for Customer {customer_id}\",\n",
    "                labels={\"Product_Category\": \"Category\", \"Total_Spend\": \"Total Spend ($)\"},\n",
    "                color=\"Product_Category\",\n",
    "            )\n",
    "\n",
    "            return table, bar_fig\n",
    "        \n",
    "        else:\n",
    "            return html.Div(\"No matching customer found.\"), go.Figure()\n",
    "\n",
    "    return html.Div(\"Enter a Customer ID and click Search.\"), go.Figure()\n",
    "\n",
    "\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Callback for Demographic Group Analysis\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"demographic-analysis-output\", \"children\"), \n",
    "     Output(\"demographic-category-plot\", \"figure\")],  \n",
    "    [Input(\"demographic-gender-checklist\", \"value\"), \n",
    "     Input(\"demographic-location-dropdown\", \"value\")],\n",
    ")\n",
    "def analyze_demographic_group(selected_genders, selected_locations):\n",
    "    filtered_df = df.copy()\n",
    "    \n",
    "    # filters based on gender\n",
    "    if selected_genders:\n",
    "        filtered_df = filtered_df[filtered_df[\"Gender\"].isin(selected_genders)]\n",
    "    \n",
    "    # filters based on location\n",
    "    if selected_locations:\n",
    "        filtered_df = filtered_df[filtered_df[\"Location\"].isin(selected_locations)]\n",
    "    \n",
    "    if not filtered_df.empty:\n",
    "        # table for demographic analysis\n",
    "        table = dash_table.DataTable(\n",
    "            data=filtered_df[[\"Gender\", \"Location\", \"Product_Category\", \"Total_Spend\"]]\n",
    "                 .groupby([\"Gender\", \"Location\", \"Product_Category\"])\n",
    "                 .sum()\n",
    "                 .reset_index()\n",
    "                 .to_dict(\"records\"),\n",
    "            columns=[\n",
    "                {\"name\": \"Gender\", \"id\": \"Gender\"},\n",
    "                {\"name\": \"Location\", \"id\": \"Location\"},\n",
    "                {\"name\": \"Product Category\", \"id\": \"Product_Category\"},\n",
    "                {\"name\": \"Total Spend ($)\", \"id\": \"Total_Spend\"},\n",
    "            ],\n",
    "            style_table={\"overflowX\": \"auto\"},\n",
    "            page_size=7,\n",
    "        )\n",
    "\n",
    "        # data for the bar chart\n",
    "        category_data = filtered_df.groupby(\"Product_Category\")[\"Total_Spend\"].sum().reset_index()\n",
    "\n",
    "        # bar chart\n",
    "        bar_fig = px.bar(\n",
    "            category_data,\n",
    "            x=\"Product_Category\",\n",
    "            y=\"Total_Spend\",\n",
    "            title=\"Total Spend by Category (Demographic Filter)\",\n",
    "            labels={\"Product_Category\": \"Category\", \"Total_Spend\": \"Total Spend ($)\"},\n",
    "            color=\"Product_Category\",\n",
    "        )\n",
    "\n",
    "        return table, bar_fig  # Return both the table and the bar chart figure\n",
    "\n",
    "    else:\n",
    "        # If no data matches the filters - return placeholders\n",
    "        return html.Div(\"No data available for the selected filters.\"), go.Figure()\n",
    "        \n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Callback for sales\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"sales-output\", \"children\"),\n",
    "    [Input(\"sales-date-picker\", \"start_date\"), \n",
    "     Input(\"sales-date-picker\", \"end_date\"),\n",
    "     Input(\"sales-location-dropdown\", \"value\"), \n",
    "     Input(\"sales-category-dropdown\", \"value\"),\n",
    "     Input(\"forecast-slider\", \"value\")],  \n",
    ")\n",
    "def update_sales_output(start_date, end_date, location, category, forecast_period):\n",
    "    filtered_df = df.copy()\n",
    "\n",
    "    # Filter by date range\n",
    "    if start_date and end_date:\n",
    "        filtered_df = filtered_df[(filtered_df[\"Transaction_Date\"] >= start_date) &\n",
    "                                  (filtered_df[\"Transaction_Date\"] <= end_date)]\n",
    "\n",
    "    # Filter by location\n",
    "    if location:\n",
    "        filtered_df = filtered_df[filtered_df[\"Location\"] == location]\n",
    "\n",
    "    # Filter by product category\n",
    "    if category:\n",
    "        filtered_df = filtered_df[filtered_df[\"Product_Category\"] == category]\n",
    "\n",
    "    # If no data is available - return a message\n",
    "    if filtered_df.empty:\n",
    "        return html.Div(\"No sales data available for selected filters.\")\n",
    "\n",
    "    # Total sales by day for the line chart\n",
    "    daily_sales = filtered_df.groupby(\"Transaction_Date\")[\"Total_Spend\"].sum().reset_index()\n",
    "\n",
    "    # Ensure the data is sorted by date\n",
    "    daily_sales.set_index(\"Transaction_Date\", inplace=True)\n",
    "    daily_sales.sort_index(inplace=True)\n",
    "\n",
    "    # Fit the SARIMA model\n",
    "    try:\n",
    "        model = SARIMAX(\n",
    "            daily_sales[\"Total_Spend\"],\n",
    "            order=(2, 1, 2), \n",
    "            seasonal_order=(2, 1, 2, 7),  \n",
    "            enforce_stationarity=False,\n",
    "            enforce_invertibility=False,\n",
    "        )\n",
    "        sarima_fit = model.fit(disp=False)\n",
    "\n",
    "        # Forecast future sales\n",
    "        forecast_index = pd.date_range(\n",
    "            start=daily_sales.index[-1], \n",
    "            periods=forecast_period + 1, \n",
    "            freq=\"D\"\n",
    "        )[1:]  \n",
    "        forecast_values = sarima_fit.get_forecast(steps=forecast_period).predicted_mean\n",
    "        forecast_df = pd.DataFrame({\"Transaction_Date\": forecast_index, \"Total_Spend\": forecast_values})\n",
    "    except Exception as e:\n",
    "        return html.Div(f\"Error fitting SARIMA model: {str(e)}\")\n",
    "\n",
    "    # Combine actuals and forecast for visualisation\n",
    "    daily_sales.reset_index(inplace=True)\n",
    "    combined_df = pd.concat([daily_sales, forecast_df])\n",
    "\n",
    "    #  line chart\n",
    "    line_fig = px.line(\n",
    "        combined_df,\n",
    "        x=\"Transaction_Date\",\n",
    "        y=\"Total_Spend\",\n",
    "        title=\"Total Sales Over Time\",\n",
    "        labels={\"Transaction_Date\": \"Date\", \"Total_Spend\": \"Total Sales ($)\"},\n",
    "    )\n",
    "\n",
    "    # forecast to the line chart with a different color\n",
    "    line_fig.add_scatter(\n",
    "        x=forecast_df[\"Transaction_Date\"],\n",
    "        y=forecast_df[\"Total_Spend\"],\n",
    "        mode=\"lines\",\n",
    "        name=\"Forecast\",\n",
    "        line=dict(color=\"red\", dash=\"dot\"),\n",
    "    )\n",
    "\n",
    "    #  map \n",
    "    state_sales = filtered_df.groupby(\"Location_Code\")[\"Total_Spend\"].sum().reset_index()\n",
    "    map_fig = px.choropleth(\n",
    "        state_sales,\n",
    "        locations=\"Location_Code\",\n",
    "        locationmode=\"USA-states\",\n",
    "        color=\"Total_Spend\",\n",
    "        color_continuous_scale=\"Viridis\",\n",
    "        scope=\"usa\",\n",
    "        title=\"Total Sales by State\",\n",
    "        labels={\"Total_Spend\": \"Total Sales ($)\"},\n",
    "    )\n",
    "\n",
    "    # Return the map and line chart\n",
    "    return html.Div([\n",
    "        dcc.Graph(figure=map_fig), \n",
    "        dcc.Graph(figure=line_fig),  \n",
    "        dash_table.DataTable(  \n",
    "            data=filtered_df[[\"Transaction_ID\", \"Location\", \"Product_Category\", \"Total_Spend\"]].to_dict(\"records\"),\n",
    "            columns=[\n",
    "                {\"name\": \"Transaction ID\", \"id\": \"Transaction_ID\"},\n",
    "                {\"name\": \"Location\", \"id\": \"Location\"},\n",
    "                {\"name\": \"Product Category\", \"id\": \"Product_Category\"},\n",
    "                {\"name\": \"Total Spend ($)\", \"id\": \"Total_Spend\"},\n",
    "            ],\n",
    "            style_table={\"overflowX\": \"auto\"},\n",
    "            page_size=7,\n",
    "        ),\n",
    "    ])    \n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Run the Dash app\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "if __name__ == \"__main__\":\n",
    "    app.run_server(mode=\"external\", debug=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b80ae99-9eb0-43f8-9489-307bdf3c8e2d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
