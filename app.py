{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "375ee2b9-682d-493c-934a-be0f9e31513d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "from dash import Dash, dcc, html, Input, Output\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from sklearn.neighbors import NearestNeighbors\n",
    "from sklearn.model_selection import train_test_split\n",
    "from mlxtend.frequent_patterns import apriori, association_rules\n",
    "import networkx as nx\n",
    "import os\n",
    "\n",
    "# Initialize Dash app\n",
    "app = Dash(__name__, suppress_callback_exceptions=True)\n",
    "server = app.server\n",
    "\n",
    "# ----------------------------------------\n",
    "# Data Prep\n",
    "# ----------------------------------------\n",
    "# read the file\n",
    "df = pd.read_csv(\"file.csv\")\n",
    "\n",
    "# feature selection\n",
    "df = df[['CustomerID',\n",
    "         'Gender',\n",
    "         'Location',\n",
    "         'Transaction_ID',\n",
    "         'Transaction_Date',\n",
    "         'Product_Description',\n",
    "         'Product_Category',\n",
    "         'Quantity',\n",
    "         'Avg_Price',\n",
    "         'Online_Spend',\n",
    "         'Offline_Spend']]\n",
    "\n",
    "# convert states names into codes\n",
    "location_mapping = {\n",
    "    'Chicago': 'IL',\n",
    "    'California': 'CA',\n",
    "    'New York': 'NY', \n",
    "    'New Jersey': 'NJ', \n",
    "    'Washington DC': 'DC',   \n",
    "}\n",
    "\n",
    "df['Location_Code'] = df['Location'].map(location_mapping)\n",
    "\n",
    "# Get total spent \n",
    "df['Total_Spend'] = df['Offline_Spend'] + df['Online_Spend']\n",
    "\n",
    "# Adjust dates\n",
    "df['Transaction_Date'] = pd.to_datetime(df['Transaction_Date'])\n",
    "df['Month'] = pd.to_datetime(df['Transaction_Date']).dt.to_period('M')\n",
    "\n",
    "# Drop missing values\n",
    "df = df.dropna()\n",
    "\n",
    "# ----------------------------------------\n",
    "# Data Prep for recomendation user-user\n",
    "# ----------------------------------------\n",
    "\n",
    "df2 = pd.read_csv(\"file.csv\")\n",
    "recommendation_df = df2[[\"CustomerID\", \"Product_Description\"]]\n",
    "recommendation_df['Rank'] = recommendation_df.groupby(['CustomerID', 'Product_Description'])['Product_Description'].transform('count')\n",
    "recommendation_df = recommendation_df.drop_duplicates()\n",
    "recommendation_df = recommendation_df.dropna()\n",
    "recommendation_df = recommendation_df[recommendation_df.groupby('CustomerID')['CustomerID'].transform('count') > 1]\n",
    "\n",
    "# User-item matrix\n",
    "user_item_matrix = recommendation_df.pivot_table(index='CustomerID', columns='Product_Description', values='Rank', fill_value=0)\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test = train_test_split(user_item_matrix, test_size=0.25, random_state=42)\n",
    "\n",
    "# Train the collaborative filtering model using KNN\n",
    "model_knn = NearestNeighbors(metric='cosine', algorithm='brute')\n",
    "model_knn.fit(X_train)\n",
    "\n",
    "# Define function for recommendation user-user\n",
    "def user_user(user_id, num_recommendations=1):\n",
    "    if user_id not in user_item_matrix.index:\n",
    "        return [f\"User ID {user_id} not found in the dataset.\"]\n",
    "    \n",
    "    # Get the user row\n",
    "    user_row = user_item_matrix.loc[user_id].values.reshape(1, -1)\n",
    "    \n",
    "    # Find similar users\n",
    "    distances, indices = model_knn.kneighbors(user_row, n_neighbors=num_recommendations + 1)\n",
    "    similar_user_indices = indices.flatten()[1:]\n",
    "    \n",
    "    # Get items from similar users\n",
    "    similar_users = user_item_matrix.iloc[similar_user_indices]\n",
    "    recommendations = similar_users.sum(axis=0)\n",
    "    \n",
    "    # Exclude products the user already owns\n",
    "    user_products = set(user_item_matrix.loc[user_id][user_item_matrix.loc[user_id] > 0].index)\n",
    "    recommendations = recommendations.drop(user_products)\n",
    "    \n",
    "    # Get top recommendations\n",
    "    recommended_products = recommendations.nlargest(num_recommendations).index.tolist()\n",
    "    return recommended_products\n",
    "\n",
    "def plot_customer_recommendation_graph(user_id, similar_users, recommendations):\n",
    "\n",
    "    G = nx.DiGraph()\n",
    "\n",
    "    # Add the target customer as the central node\n",
    "    G.add_node(user_id, label=\"Target Customer\", node_color=\"lightblue\")\n",
    "\n",
    "    # Add similar users\n",
    "    for similar_user in similar_users:\n",
    "        G.add_node(similar_user, label=f\"Customer {similar_user}\", node_color=\"lightgreen\")\n",
    "        G.add_edge(user_id, similar_user)\n",
    "\n",
    "    # Add recommended products\n",
    "    for product in recommendations:\n",
    "        G.add_node(product, label=f\"Product: {product}\", node_color=\"orange\")\n",
    "        for similar_user in similar_users:\n",
    "            G.add_edge(similar_user, product)\n",
    "\n",
    "    # Get positions for nodes\n",
    "    pos = nx.spring_layout(G, seed=42)\n",
    "\n",
    "    # Create Plotly edges\n",
    "    edge_x = []\n",
    "    edge_y = []\n",
    "    for edge in G.edges():\n",
    "        x0, y0 = pos[edge[0]]\n",
    "        x1, y1 = pos[edge[1]]\n",
    "        edge_x.append(x0)\n",
    "        edge_x.append(x1)\n",
    "        edge_x.append(None)\n",
    "        edge_y.append(y0)\n",
    "        edge_y.append(y1)\n",
    "        edge_y.append(None)\n",
    "\n",
    "    edge_trace = go.Scatter(\n",
    "        x=edge_x,\n",
    "        y=edge_y,\n",
    "        line=dict(width=1, color='#888'),\n",
    "        hoverinfo='none',\n",
    "        mode='lines'\n",
    "    )\n",
    "\n",
    "    # Create Plotly nodes\n",
    "    node_x = []\n",
    "    node_y = []\n",
    "    node_labels = []\n",
    "    node_colors = []\n",
    "    for node in G.nodes(data=True):\n",
    "        x, y = pos[node[0]]\n",
    "        node_x.append(x)\n",
    "        node_y.append(y)\n",
    "        node_labels.append(node[1].get('label', str(node[0])))\n",
    "        node_colors.append(node[1].get('node_color', \"lightblue\"))\n",
    "\n",
    "    node_trace = go.Scatter(\n",
    "        x=node_x,\n",
    "        y=node_y,\n",
    "        mode='markers+text',\n",
    "        text=node_labels,\n",
    "        textposition=\"top center\",\n",
    "        marker=dict(\n",
    "            size=20,\n",
    "            color=node_colors,\n",
    "            line=dict(width=2, color='black')\n",
    "        ),\n",
    "        hoverinfo='text'\n",
    "    )\n",
    "\n",
    "    # Create figure\n",
    "    fig = go.Figure(data=[edge_trace, node_trace],\n",
    "                    layout=go.Layout(\n",
    "                        title='Customer-Based Recommendation Graph',\n",
    "                        titlefont_size=16,\n",
    "                        showlegend=False,\n",
    "                        hovermode='closest',\n",
    "                        margin=dict(b=0, l=0, r=0, t=40),\n",
    "                        xaxis=dict(showgrid=False, zeroline=False),\n",
    "                        yaxis=dict(showgrid=False, zeroline=False))\n",
    "                    )\n",
    "\n",
    "    return fig\n",
    "\n",
    "# ----------------------------------------\n",
    "# Data Prep for recomendation item-item\n",
    "# ----------------------------------------\n",
    "\n",
    "df3 = pd.read_csv(\"file.csv\")\n",
    "product_recommendation_df = df3[[\"CustomerID\", \"Product_Description\"]]\n",
    "product_recommendation_df = product_recommendation_df.dropna()\n",
    "\n",
    "# Customer-Product Matrix\n",
    "customer_product_matrix = product_recommendation_df.pivot_table(\n",
    "    index='CustomerID',\n",
    "    columns='Product_Description',\n",
    "    aggfunc=lambda x: True,\n",
    "    fill_value=False\n",
    ")\n",
    "\n",
    "# Reset the index and drop CustomerID if necessary\n",
    "customer_product_matrix = customer_product_matrix.reset_index(drop=True)\n",
    "\n",
    "# Frequent Itemsets and Association Rules\n",
    "frequent_itemsets_ap = apriori(customer_product_matrix, min_support=0.3, use_colnames=True)\n",
    "rules_ap = association_rules(frequent_itemsets_ap, metric=\"confidence\", min_threshold=0.8)\n",
    "\n",
    "# Recommendation function based on products\n",
    "def recommend_products(rules, product_basket):\n",
    "    recommendations = set()\n",
    "    for _, rule in rules.iterrows():\n",
    "        antecedents = set(rule['antecedents'])\n",
    "        consequents = set(rule['consequents'])\n",
    "        \n",
    "        # Check if all antecedents are in the current basket\n",
    "        if antecedents.issubset(product_basket):\n",
    "            recommendations.update(consequents - set(product_basket))\n",
    "    \n",
    "    return list(recommendations)\n",
    "\n",
    "# Create a function for displaying network connection for recommended item\n",
    "def plot_rule_graph(rules, product_basket):\n",
    "    \"\"\"\n",
    "    Create a Plotly graph for the recommendation rule paths.\n",
    "    \"\"\"\n",
    "    G = nx.DiGraph()\n",
    "\n",
    "    # Add nodes and edges based on rules\n",
    "    for _, rule in rules.iterrows():\n",
    "        antecedents = ', '.join(list(rule['antecedents']))\n",
    "        consequents = ', '.join(list(rule['consequents']))\n",
    "        \n",
    "        # Only include rules where antecedents match the basket\n",
    "        if set(rule['antecedents']).issubset(product_basket):\n",
    "            G.add_edge(antecedents, consequents, weight=rule['lift'])\n",
    "\n",
    "    # Get positions for nodes\n",
    "    pos = nx.spring_layout(G, seed=42)\n",
    "\n",
    "    # Create Plotly edges\n",
    "    edge_x = []\n",
    "    edge_y = []\n",
    "    for edge in G.edges(data=True):\n",
    "        x0, y0 = pos[edge[0]]\n",
    "        x1, y1 = pos[edge[1]]\n",
    "        edge_x.append(x0)\n",
    "        edge_x.append(x1)\n",
    "        edge_x.append(None)\n",
    "        edge_y.append(y0)\n",
    "        edge_y.append(y1)\n",
    "        edge_y.append(None)\n",
    "\n",
    "    edge_trace = go.Scatter(\n",
    "        x=edge_x,\n",
    "        y=edge_y,\n",
    "        line=dict(width=1, color='#888'),\n",
    "        hoverinfo='none',\n",
    "        mode='lines'\n",
    "    )\n",
    "\n",
    "    # Create Plotly nodes\n",
    "    node_x = []\n",
    "    node_y = []\n",
    "    text = []\n",
    "    for node in G.nodes():\n",
    "        x, y = pos[node]\n",
    "        node_x.append(x)\n",
    "        node_y.append(y)\n",
    "        text.append(node)\n",
    "\n",
    "    node_trace = go.Scatter(\n",
    "        x=node_x,\n",
    "        y=node_y,\n",
    "        mode='markers+text',\n",
    "        hoverinfo='text',\n",
    "        text=text,\n",
    "        textposition=\"top center\",\n",
    "        marker=dict(\n",
    "            showscale=True,\n",
    "            colorscale='YlGnBu',\n",
    "            reversescale=True,\n",
    "            color=[],\n",
    "            size=15,\n",
    "            colorbar=dict(\n",
    "                thickness=15,\n",
    "                title='Node Connections',\n",
    "                xanchor='left',\n",
    "                titleside='right'\n",
    "            ),\n",
    "            line_width=2\n",
    "        )\n",
    "    )\n",
    "\n",
    "    # Assign colors based on number of connections\n",
    "    node_adjacencies = []\n",
    "    for node, adjacencies in enumerate(G.adjacency()):\n",
    "        node_adjacencies.append(len(adjacencies[1]))\n",
    "    node_trace.marker.color = node_adjacencies\n",
    "\n",
    "    # Create figure\n",
    "    fig = go.Figure(data=[edge_trace, node_trace],\n",
    "                    layout=go.Layout(\n",
    "                        title='Recommendation Rule Path',\n",
    "                        titlefont_size=16,\n",
    "                        showlegend=False,\n",
    "                        hovermode='closest',\n",
    "                        margin=dict(b=0, l=0, r=0, t=40),\n",
    "                        xaxis=dict(showgrid=False, zeroline=False),\n",
    "                        yaxis=dict(showgrid=False, zeroline=False))\n",
    "                    )\n",
    "\n",
    "    return fig\n",
    "\n",
    "# --------------------------------------\n",
    "# Initialize the dashboard\n",
    "# -------------------------------------\n",
    "\n",
    "app = Dash(__name__, suppress_callback_exceptions=True)\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Dashboard layout\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "app.layout = html.Div(\n",
    "    style={\n",
    "        \"display\": \"flex\",\n",
    "        \"flex-direction\": \"row\",\n",
    "        \"width\": \"100%\",\n",
    "        \"height\": \"100vh\",\n",
    "        \"margin\": \"0\",\n",
    "        \"padding\": \"0\",\n",
    "    },\n",
    "    children=[\n",
    "        # Left Sidebar for Inputs\n",
    "        html.Div(\n",
    "            [\n",
    "                dcc.Tabs(\n",
    "                    id=\"main-tabs\",\n",
    "                    value=\"customers-info\",\n",
    "                    children=[\n",
    "                        dcc.Tab(label=\"Customer Info\", value=\"customers-info\"),\n",
    "                        dcc.Tab(label=\"Recommendations\", value=\"recommendations\"),\n",
    "                        dcc.Tab(label=\"Sales\", value=\"sales\"),\n",
    "                    ],\n",
    "                ),\n",
    "                html.Div(id=\"main-tab-content\", style={\"padding\": \"20px\"}),\n",
    "            ],\n",
    "            style={\n",
    "                \"flex\": \"0 0 30%\",\n",
    "                \"height\": \"100%\",\n",
    "                \"border-right\": \"1px solid lightgray\",\n",
    "                \"padding\": \"10px\",\n",
    "                \"box-shadow\": \"0px 0px 10px rgba(0,0,0,0.1)\",\n",
    "                \"overflow-y\": \"auto\",\n",
    "                \"box-sizing\": \"border-box\",\n",
    "            },\n",
    "        ),\n",
    "\n",
    "        # Right Side for Outputs (Plots and Tables)\n",
    "        html.Div(\n",
    "            [\n",
    "                html.Div(id=\"output-content\", style={\"padding\": \"20px\"}),\n",
    "            ],\n",
    "            style={\n",
    "                \"flex\": \"1\",\n",
    "                \"height\": \"100%\",\n",
    "                \"padding\": \"20px\",\n",
    "                \"overflow-y\": \"auto\",\n",
    "                \"box-sizing\": \"border-box\",\n",
    "            },\n",
    "        ),\n",
    "    ],\n",
    ")\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Callbacks\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Add 3 tabs with sub tubs (Customer info, Recomendations and Sales)\n",
    "# Define Properties (Input: tabs IDs line 72, Output: function update_tab_content)\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"main-tab-content\", \"children\"), Output(\"output-content\", \"children\")],\n",
    "    Input(\"main-tabs\", \"value\"),\n",
    ")\n",
    "def update_tab_content(tab_name):\n",
    "    if tab_name == \"customers-info\":\n",
    "        # Left-Side Inputs\n",
    "        inputs = html.Div([\n",
    "            dcc.Tabs(\n",
    "                id=\"customer-info-tabs\",\n",
    "                value=\"specific-customer\",\n",
    "                children=[\n",
    "                    dcc.Tab(label=\"Specific Customer\", value=\"specific-customer\"),\n",
    "                    dcc.Tab(label=\"Demographic Group\", value=\"demographic-group\"),\n",
    "                ],\n",
    "            ),\n",
    "            html.Div(id=\"customer-info-inputs\", style={\"padding\": \"20px\"}),\n",
    "        ])\n",
    "\n",
    "        # Right-Side Outputs\n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"customer-info-outputs\"),\n",
    "        ])\n",
    "\n",
    "        return inputs, outputs\n",
    "\n",
    "    elif tab_name == \"recommendations\":\n",
    "        # Left-Side Inputs with Sub-Tabs\n",
    "        inputs = html.Div([\n",
    "            dcc.Tabs(\n",
    "                id=\"recommendation-tabs\",\n",
    "                value=\"based-on-customer\",\n",
    "                children=[\n",
    "                    dcc.Tab(label=\"Based on Customer\", value=\"based-on-customer\"),\n",
    "                    dcc.Tab(label=\"Based on Product\", value=\"based-on-product\"),\n",
    "                ],\n",
    "            ),\n",
    "            html.Div(id=\"recommendation-inputs\", style={\"padding\": \"20px\"}),\n",
    "        ])\n",
    "\n",
    "        # Right-Side Outputs\n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"recommendation-outputs\"),\n",
    "        ])\n",
    "\n",
    "        return inputs, outputs\n",
    "\n",
    "    elif tab_name == \"sales\":\n",
    "    # Left-Side Inputs for Sales\n",
    "        inputs = html.Div([\n",
    "            html.H3(\"Sales Filters\"),\n",
    "            html.Label(\"Date Range:\"),\n",
    "            dcc.DatePickerRange(\n",
    "                id=\"sales-date-picker\",\n",
    "                start_date=df[\"Transaction_Date\"].min(),\n",
    "                end_date=df[\"Transaction_Date\"].max(),\n",
    "            ),\n",
    "            html.Label(\"Location:\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"sales-location-dropdown\",\n",
    "                options=[{\"label\": loc, \"value\": loc} for loc in df[\"Location\"].unique()],\n",
    "                placeholder=\"Select a location\",\n",
    "            ),\n",
    "            html.Label(\"Product Category:\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"sales-category-dropdown\",\n",
    "                options=[{\"label\": cat, \"value\": cat} for cat in df[\"Product_Category\"].unique()],\n",
    "                placeholder=\"Select a product category\",\n",
    "            ),\n",
    "            html.Label(\"Forecast Period (Days):\"),\n",
    "            dcc.Slider(  # Add the slider here\n",
    "                id=\"forecast-slider\",\n",
    "                min=1,\n",
    "                max=30,\n",
    "                step=1,\n",
    "                value=7,  # Default to 7 days\n",
    "                marks={i: f\"{i}d\" for i in range(1, 31, 5)},\n",
    "            ),\n",
    "        ])\n",
    "    \n",
    "        # Right-Side Outputs\n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"sales-output\"),\n",
    "        ])\n",
    "    \n",
    "        return inputs, outputs\n",
    "\n",
    "    return html.Div(), html.Div()\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Recommendation Sub-Tab Callback\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"recommendation-inputs\", \"children\"), Output(\"recommendation-outputs\", \"children\")],\n",
    "    Input(\"recommendation-tabs\", \"value\"),\n",
    ")\n",
    "def update_recommendation_tab_content(tab_name):\n",
    "    if tab_name == \"based-on-customer\":\n",
    "        inputs = html.Div([\n",
    "            html.H4(\"Recommendations Based on Customer\"),\n",
    "            html.Label(\"Select or Enter Customer ID:\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"recommendation-customer-dropdown\",\n",
    "                options=[{\"label\": str(customer_id), \"value\": customer_id} for customer_id in recommendation_df[\"CustomerID\"].unique()],\n",
    "                placeholder=\"Select a Customer ID\",\n",
    "            ),\n",
    "            html.Br(),\n",
    "            dcc.Input(id=\"recommendation-customer-id\", type=\"text\", placeholder=\"Or Enter Customer ID\"),\n",
    "            html.Button(\"Generate\", id=\"recommendation-customer-button\"),\n",
    "        ])\n",
    "    \n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"recommendation-customer-output\"),\n",
    "            dcc.Graph(id=\"recommendation-customer-graph\"),  # Add graph component here\n",
    "        ])\n",
    "    \n",
    "        return inputs, outputs\n",
    "\n",
    "    elif tab_name == \"based-on-product\":\n",
    "        # Left Side Inputs\n",
    "        inputs = html.Div([\n",
    "            html.H4(\"Recommendations Based on Product\"),\n",
    "            html.Label(\"Select Products:\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"recommendation-product-dropdown\",\n",
    "                options=[{\"label\": product, \"value\": product} for product in product_recommendation_df[\"Product_Description\"].unique()],\n",
    "                multi=True,\n",
    "                placeholder=\"Select one or more products\",\n",
    "            ),\n",
    "            html.Button(\"Generate\", id=\"recommendation-product-button\"),\n",
    "        ])\n",
    "        \n",
    "        # Right Side Outputs\n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"recommendation-product-output\"),\n",
    "            dcc.Graph(id=\"recommendation-product-graph\"),  # Add graph component here\n",
    "        ])\n",
    "        \n",
    "        return inputs, outputs\n",
    "\n",
    "    return html.Div(), html.Div()\n",
    "\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# User-User recomendation \n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"recommendation-customer-output\", \"children\"),\n",
    "     Output(\"recommendation-customer-graph\", \"figure\")],  # Add graph output\n",
    "    [Input(\"recommendation-customer-button\", \"n_clicks\")],\n",
    "    [State(\"recommendation-customer-id\", \"value\"),\n",
    "     State(\"recommendation-customer-dropdown\", \"value\")],\n",
    ")\n",
    "def generate_customer_recommendations(n_clicks, customer_id_text, customer_id_dropdown):\n",
    "    # Use dropdown value if available, otherwise use text input\n",
    "    customer_id = customer_id_dropdown or customer_id_text\n",
    "    if n_clicks and customer_id:\n",
    "        try:\n",
    "            customer_id = int(customer_id)  # Convert to integer if necessary\n",
    "        except ValueError:\n",
    "            return f\"Invalid Customer ID: {customer_id}. Please enter a valid numeric ID.\", go.Figure()\n",
    "\n",
    "        # Get recommendations and similar users\n",
    "        recommendations = user_user(customer_id, num_recommendations=3)\n",
    "        similar_users = user_item_matrix.loc[user_id].nlargest(3).index.tolist()\n",
    "\n",
    "        # Generate graph\n",
    "        figure = plot_customer_recommendation_graph(customer_id, similar_users, recommendations)\n",
    "\n",
    "        return html.Ul([html.Li(product) for product in recommendations]), figure\n",
    "\n",
    "    return \"Enter a Customer ID and click Generate.\", go.Figure()\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Item-Item recomendation \n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"recommendation-product-output\", \"children\"),\n",
    "     Output(\"recommendation-product-graph\", \"figure\")],  # Add graph output\n",
    "    [Input(\"recommendation-product-button\", \"n_clicks\")],\n",
    "    [State(\"recommendation-product-dropdown\", \"value\")],\n",
    ")\n",
    "def generate_product_recommendations(n_clicks, product_basket):\n",
    "    if n_clicks and product_basket:\n",
    "        try:\n",
    "            # Convert dropdown values (list) into a set of selected products\n",
    "            product_basket = set(product_basket)\n",
    "        except Exception as e:\n",
    "            return f\"Error processing selected products: {e}\", go.Figure()\n",
    "\n",
    "        # Generate recommendations\n",
    "        recommendations = recommend_products(rules_ap, product_basket)\n",
    "        \n",
    "        # Generate graph for rules\n",
    "        figure = plot_rule_graph(rules_ap, product_basket)\n",
    "\n",
    "        if recommendations:\n",
    "            return html.Ul([html.Li(product) for product in recommendations]), figure\n",
    "        else:\n",
    "            return \"No recommendations found for the selected products.\", go.Figure()\n",
    "\n",
    "    return \"Select products and click Generate.\", go.Figure()\n",
    "\n",
    "\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Callbacks for Customer Info Sub-Tabs\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"customer-info-inputs\", \"children\"), Output(\"customer-info-outputs\", \"children\")],\n",
    "    Input(\"customer-info-tabs\", \"value\"),\n",
    ")\n",
    "def update_customer_info_content(tab_name):\n",
    "    if tab_name == \"specific-customer\":\n",
    "        # Left-Side Inputs\n",
    "        inputs = html.Div([\n",
    "            html.H4(\"Specific Customer Information\"),\n",
    "            html.Label(\"Select or Enter Customer ID:\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"specific-customer-dropdown\",\n",
    "                options=[{\"label\": str(customer_id), \"value\": customer_id} for customer_id in df[\"CustomerID\"].unique()],\n",
    "                placeholder=\"Select a Customer ID\",\n",
    "            ),\n",
    "            html.Br(),\n",
    "            html.Label(\"Or Enter Customer ID:\"),\n",
    "            dcc.Input(id=\"specific-customer-id\", type=\"text\", placeholder=\"Customer ID\"),\n",
    "            html.Br(),\n",
    "            html.Button(\"Search\", id=\"search-button\"),\n",
    "        ])\n",
    "\n",
    "        # Right-Side Outputs\n",
    "        outputs = html.Div([\n",
    "            html.Div(id=\"specific-customer-info\"),\n",
    "            dcc.Graph(id=\"specific-customer-plot\"),\n",
    "        ])\n",
    "\n",
    "        return inputs, outputs\n",
    "\n",
    "    elif tab_name == \"demographic-group\":\n",
    "    # Left-Side Inputs\n",
    "        inputs = html.Div([\n",
    "            html.H4(\"Demographic Group Analysis\"),\n",
    "            html.Label(\"Select Gender:\"),\n",
    "            dcc.Checklist(\n",
    "                id=\"demographic-gender-checklist\",\n",
    "                options=[\n",
    "                    {\"label\": \"Male\", \"value\": \"M\"},\n",
    "                    {\"label\": \"Female\", \"value\": \"F\"},\n",
    "                ],\n",
    "                inline=True,\n",
    "            ),\n",
    "            html.Label(\"Select Location(s):\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"demographic-location-dropdown\",\n",
    "                options=[{\"label\": loc, \"value\": loc} for loc in df[\"Location\"].unique()],\n",
    "                multi=True,\n",
    "            ),\n",
    "        ], style={\"width\": \"30%\", \"padding\": \"20px\", \"border-right\": \"1px solid lightgray\"})\n",
    "    \n",
    "        # Right-Side Outputs (Bar Plot + Table)\n",
    "        outputs = html.Div([\n",
    "            dcc.Graph(id=\"demographic-category-plot\"),  # Bar Chart\n",
    "            html.Div(id=\"demographic-analysis-output\"),  # Table\n",
    "        ], style={\"width\": \"70%\", \"padding\": \"20px\", \"display\": \"flex\", \"flexDirection\": \"column\", \"gap\": \"20px\"})\n",
    "    \n",
    "        return inputs, outputs\n",
    "\n",
    "    return html.Div(), html.Div()\n",
    "\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Callback for Specific Customer Information\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"specific-customer-info\", \"children\"),\n",
    "     Output(\"specific-customer-plot\", \"figure\")],\n",
    "    [Input(\"search-button\", \"n_clicks\")],\n",
    "    [State(\"specific-customer-id\", \"value\"),\n",
    "     State(\"specific-customer-dropdown\", \"value\")],  # Dropdown State added\n",
    ")\n",
    "def fetch_specific_customer_info(n_clicks, customer_id_text, customer_id_dropdown):\n",
    "    # Resolve the customer_id to use\n",
    "    customer_id = customer_id_dropdown or customer_id_text  # Dropdown takes precedence if set\n",
    "\n",
    "    if n_clicks and customer_id:\n",
    "        # Filter the data for the specified customer ID\n",
    "        filtered_df = df[df[\"CustomerID\"].astype(str).str.contains(str(customer_id))]\n",
    "        \n",
    "        if not filtered_df.empty:\n",
    "            # Create a table for the customer's transactions\n",
    "            table = dash_table.DataTable(\n",
    "                data=filtered_df[[\"CustomerID\", \"Transaction_ID\", \"Transaction_Date\", \"Product_Description\", \n",
    "                                  \"Product_Category\", \"Quantity\", \"Total_Spend\"]].drop_duplicates().to_dict(\"records\"),\n",
    "                columns=[\n",
    "                    {\"name\": \"Customer ID\", \"id\": \"CustomerID\"},\n",
    "                    {\"name\": \"Transaction ID\", \"id\": \"Transaction_ID\"},\n",
    "                    {\"name\": \"Transaction Date\", \"id\": \"Transaction_Date\"},\n",
    "                    {\"name\": \"Product Description\", \"id\": \"Product_Description\"},\n",
    "                    {\"name\": \"Product Category\", \"id\": \"Product_Category\"},\n",
    "                    {\"name\": \"Quantity\", \"id\": \"Quantity\"},\n",
    "                    {\"name\": \"Total Spend ($)\", \"id\": \"Total_Spend\"},\n",
    "                ],\n",
    "                style_table={\"overflowX\": \"auto\"},\n",
    "                page_size=10,  # Paginate if needed\n",
    "            )\n",
    "\n",
    "            # Aggregate data for the bar plot\n",
    "            category_data = filtered_df.groupby(\"Product_Category\")[\"Total_Spend\"].sum().reset_index()\n",
    "\n",
    "            # Create a bar plot\n",
    "            bar_fig = px.bar(\n",
    "                category_data,\n",
    "                x=\"Product_Category\",\n",
    "                y=\"Total_Spend\",\n",
    "                title=f\"Total Spend by Category for Customer {customer_id}\",\n",
    "                labels={\"Product_Category\": \"Category\", \"Total_Spend\": \"Total Spend ($)\"},\n",
    "                color=\"Product_Category\",\n",
    "            )\n",
    "\n",
    "            return table, bar_fig\n",
    "        \n",
    "        else:\n",
    "            return html.Div(\"No matching customer found.\"), go.Figure()\n",
    "\n",
    "    return html.Div(\"Enter a Customer ID and click Search.\"), go.Figure()\n",
    "\n",
    "\n",
    "\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Callback for Demographic Group Analysis\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    [Output(\"demographic-analysis-output\", \"children\"), \n",
    "     Output(\"demographic-category-plot\", \"figure\")],  # Add the bar chart figure\n",
    "    [Input(\"demographic-gender-checklist\", \"value\"), \n",
    "     Input(\"demographic-location-dropdown\", \"value\")],\n",
    ")\n",
    "def analyze_demographic_group(selected_genders, selected_locations):\n",
    "    filtered_df = df.copy()\n",
    "    \n",
    "    # Apply filters based on gender\n",
    "    if selected_genders:\n",
    "        filtered_df = filtered_df[filtered_df[\"Gender\"].isin(selected_genders)]\n",
    "    \n",
    "    # Apply filters based on location\n",
    "    if selected_locations:\n",
    "        filtered_df = filtered_df[filtered_df[\"Location\"].isin(selected_locations)]\n",
    "    \n",
    "    if not filtered_df.empty:\n",
    "        # Create a table for demographic analysis\n",
    "        table = dash_table.DataTable(\n",
    "            data=filtered_df[[\"Gender\", \"Location\", \"Product_Category\", \"Total_Spend\"]]\n",
    "                 .groupby([\"Gender\", \"Location\", \"Product_Category\"])\n",
    "                 .sum()\n",
    "                 .reset_index()\n",
    "                 .to_dict(\"records\"),\n",
    "            columns=[\n",
    "                {\"name\": \"Gender\", \"id\": \"Gender\"},\n",
    "                {\"name\": \"Location\", \"id\": \"Location\"},\n",
    "                {\"name\": \"Product Category\", \"id\": \"Product_Category\"},\n",
    "                {\"name\": \"Total Spend ($)\", \"id\": \"Total_Spend\"},\n",
    "            ],\n",
    "            style_table={\"overflowX\": \"auto\"},\n",
    "        )\n",
    "\n",
    "        # Aggregate data for the bar chart\n",
    "        category_data = filtered_df.groupby(\"Product_Category\")[\"Total_Spend\"].sum().reset_index()\n",
    "\n",
    "        # Create a bar chart\n",
    "        bar_fig = px.bar(\n",
    "            category_data,\n",
    "            x=\"Product_Category\",\n",
    "            y=\"Total_Spend\",\n",
    "            title=\"Total Spend by Category (Demographic Filter)\",\n",
    "            labels={\"Product_Category\": \"Category\", \"Total_Spend\": \"Total Spend ($)\"},\n",
    "            color=\"Product_Category\",\n",
    "        )\n",
    "\n",
    "        return table, bar_fig  # Return both the table and the bar chart figure\n",
    "\n",
    "    else:\n",
    "        # If no data matches the filters, return placeholders\n",
    "        return html.Div(\"No data available for the selected filters.\"), go.Figure()\n",
    "        \n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Callback for sales\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"sales-output\", \"children\"),\n",
    "    [Input(\"sales-date-picker\", \"start_date\"), \n",
    "     Input(\"sales-date-picker\", \"end_date\"),\n",
    "     Input(\"sales-location-dropdown\", \"value\"), \n",
    "     Input(\"sales-category-dropdown\", \"value\"),\n",
    "     Input(\"forecast-slider\", \"value\")],  # Use the slider already defined in the layout\n",
    ")\n",
    "def update_sales_output(start_date, end_date, location, category, forecast_period):\n",
    "    filtered_df = df.copy()\n",
    "\n",
    "    # Filter by date range\n",
    "    if start_date and end_date:\n",
    "        filtered_df = filtered_df[(filtered_df[\"Transaction_Date\"] >= start_date) &\n",
    "                                  (filtered_df[\"Transaction_Date\"] <= end_date)]\n",
    "\n",
    "    # Filter by location\n",
    "    if location:\n",
    "        filtered_df = filtered_df[filtered_df[\"Location\"] == location]\n",
    "\n",
    "    # Filter by product category\n",
    "    if category:\n",
    "        filtered_df = filtered_df[filtered_df[\"Product_Category\"] == category]\n",
    "\n",
    "    # If no data is available, return a message\n",
    "    if filtered_df.empty:\n",
    "        return html.Div(\"No sales data available for the selected filters.\")\n",
    "\n",
    "    # Aggregate total sales by day for the line chart\n",
    "    daily_sales = filtered_df.groupby(\"Transaction_Date\")[\"Total_Spend\"].sum().reset_index()\n",
    "\n",
    "    # Ensure the data is sorted by date\n",
    "    daily_sales.set_index(\"Transaction_Date\", inplace=True)\n",
    "    daily_sales.sort_index(inplace=True)\n",
    "\n",
    "    # Fit the SARIMA model\n",
    "    try:\n",
    "        model = SARIMAX(\n",
    "            daily_sales[\"Total_Spend\"],\n",
    "            order=(2, 1, 2),  # ARIMA order (p, d, q)\n",
    "            seasonal_order=(2, 1, 2, 7),  # Seasonal order (P, D, Q, s) for weekly seasonality\n",
    "            enforce_stationarity=False,\n",
    "            enforce_invertibility=False,\n",
    "        )\n",
    "        sarima_fit = model.fit(disp=False)\n",
    "\n",
    "        # Forecast future sales\n",
    "        forecast_index = pd.date_range(\n",
    "            start=daily_sales.index[-1], \n",
    "            periods=forecast_period + 1, \n",
    "            freq=\"D\"\n",
    "        )[1:]  # Skip the first value (it overlaps with the last actual date)\n",
    "        forecast_values = sarima_fit.get_forecast(steps=forecast_period).predicted_mean\n",
    "        forecast_df = pd.DataFrame({\"Transaction_Date\": forecast_index, \"Total_Spend\": forecast_values})\n",
    "    except Exception as e:\n",
    "        return html.Div(f\"Error fitting SARIMA model: {str(e)}\")\n",
    "\n",
    "    # Combine actuals and forecast for visualization\n",
    "    daily_sales.reset_index(inplace=True)\n",
    "    combined_df = pd.concat([daily_sales, forecast_df])\n",
    "\n",
    "    # Create the line chart\n",
    "    line_fig = px.line(\n",
    "        combined_df,\n",
    "        x=\"Transaction_Date\",\n",
    "        y=\"Total_Spend\",\n",
    "        title=\"Total Sales Over Time\",\n",
    "        labels={\"Transaction_Date\": \"Date\", \"Total_Spend\": \"Total Sales ($)\"},\n",
    "    )\n",
    "\n",
    "    # Add forecast to the line chart with a different color\n",
    "    line_fig.add_scatter(\n",
    "        x=forecast_df[\"Transaction_Date\"],\n",
    "        y=forecast_df[\"Total_Spend\"],\n",
    "        mode=\"lines\",\n",
    "        name=\"Forecast\",\n",
    "        line=dict(color=\"red\", dash=\"dot\"),\n",
    "    )\n",
    "\n",
    "    # Create the map (optional, kept from previous implementation)\n",
    "    state_sales = filtered_df.groupby(\"Location_Code\")[\"Total_Spend\"].sum().reset_index()\n",
    "    map_fig = px.choropleth(\n",
    "        state_sales,\n",
    "        locations=\"Location_Code\",\n",
    "        locationmode=\"USA-states\",\n",
    "        color=\"Total_Spend\",\n",
    "        color_continuous_scale=\"Viridis\",\n",
    "        scope=\"usa\",\n",
    "        title=\"Total Sales by State\",\n",
    "        labels={\"Total_Spend\": \"Total Sales ($)\"},\n",
    "    )\n",
    "\n",
    "    # Return the map and line chart\n",
    "    return html.Div([\n",
    "        dcc.Graph(figure=map_fig),  # Display the map\n",
    "        dcc.Graph(figure=line_fig),  # Display the line chart\n",
    "        dash_table.DataTable(  # Display the filtered data as a table\n",
    "            data=filtered_df[[\"Transaction_ID\", \"Location\", \"Product_Category\", \"Total_Spend\"]].to_dict(\"records\"),\n",
    "            columns=[\n",
    "                {\"name\": \"Transaction ID\", \"id\": \"Transaction_ID\"},\n",
    "                {\"name\": \"Location\", \"id\": \"Location\"},\n",
    "                {\"name\": \"Product Category\", \"id\": \"Product_Category\"},\n",
    "                {\"name\": \"Total Spend ($)\", \"id\": \"Total_Spend\"},\n",
    "            ],\n",
    "            style_table={\"overflowX\": \"auto\"},\n",
    "        ),\n",
    "    ])    \n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "# Run the Dash app\n",
    "# ------------------------------------------------------------------------------------\n",
    "# ------------------------------------------------------------------------------------\n",
    "if __name__ == \"__main__\":\n",
    "    app.run_server(debug=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bfaffc3-6bd2-41c1-8ef3-fbfffb1ef7d8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.20"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
